-- Script SQL corrig√© pour √©viter la r√©cursion infinie dans les politiques RLS
-- √Ä ex√©cuter dans l'√©diteur SQL de Supabase pour remplacer les politiques d√©fectueuses

-- ===============================================
-- CORRECTION DES POLITIQUES RLS
-- ===============================================

-- 1. Supprimer toutes les politiques existantes pour √©viter les conflits
DROP POLICY IF EXISTS "Users can view their own profile" ON users;
DROP POLICY IF EXISTS "Users can update their own profile" ON users;
DROP POLICY IF EXISTS "Admins can view all users" ON users;
DROP POLICY IF EXISTS "Admins can update all users" ON users;
DROP POLICY IF EXISTS "Anyone can create user requests" ON user_requests;
DROP POLICY IF EXISTS "Admins can view all user requests" ON user_requests;
DROP POLICY IF EXISTS "Admins can update user requests" ON user_requests;
DROP POLICY IF EXISTS "Authenticated users can view modules" ON modules;
DROP POLICY IF EXISTS "Admins and managers can manage modules" ON modules;
DROP POLICY IF EXISTS "Authenticated users can view tasks" ON tasks;
DROP POLICY IF EXISTS "Users can update tasks assigned to them" ON tasks;
DROP POLICY IF EXISTS "Admins and managers can manage all tasks" ON tasks;
DROP POLICY IF EXISTS "Users can create tasks" ON tasks;
DROP POLICY IF EXISTS "Authenticated users can view comments" ON comments;
DROP POLICY IF EXISTS "Users can create comments" ON comments;
DROP POLICY IF EXISTS "Users can update their own comments" ON comments;
DROP POLICY IF EXISTS "Users can delete their own comments" ON comments;

-- ===============================================
-- POLITIQUES RLS CORRIG√âES (SANS R√âCURSION)
-- ===============================================

-- Politiques pour la table users (CORRIG√âES)
CREATE POLICY "Enable read access for authenticated users" ON users
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can update their own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Permettre l'insertion initiale (pour la cr√©ation de profils)
CREATE POLICY "Enable insert for authenticated users" ON users
    FOR INSERT WITH CHECK (auth.uid() = id);

-- Politiques pour user_requests (SANS R√âCURSION)
CREATE POLICY "Anyone can create user requests" ON user_requests
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Public can read pending requests" ON user_requests
    FOR SELECT USING (status = 'pending');

CREATE POLICY "Authenticated users can update requests" ON user_requests
    FOR UPDATE USING (auth.role() = 'authenticated');

-- Politiques pour modules (SIMPLIFI√âES)
CREATE POLICY "Enable read access for authenticated users" ON modules
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Enable all access for authenticated users" ON modules
    FOR ALL USING (auth.role() = 'authenticated');

-- Politiques pour tasks (SIMPLIFI√âES)
CREATE POLICY "Enable read access for authenticated users" ON tasks
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Enable all access for authenticated users" ON tasks
    FOR ALL USING (auth.role() = 'authenticated');

-- Politiques pour comments (SIMPLIFI√âES)
CREATE POLICY "Enable read access for authenticated users" ON comments
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can insert their own comments" ON comments
    FOR INSERT WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update their own comments" ON comments
    FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Users can delete their own comments" ON comments
    FOR DELETE USING (auth.uid() = author_id);

-- ===============================================
-- CR√âATION MANUELLE DU COMPTE ADMINISTRATEUR
-- ===============================================

-- Approche alternative : Cr√©er un utilisateur temporaire pour permettre l'init
-- D√©sactiver temporairement RLS pour permettre l'insertion
ALTER TABLE users DISABLE ROW LEVEL SECURITY;

-- Ins√©rer manuellement un profil admin temporaire
INSERT INTO users (
    id,
    name,
    email,
    role,
    status,
    created_at,
    updated_at
) VALUES (
    '039ed1a2-4216-46f9-8b90-d27e29330362', -- ID fixe pour les tests
    'Manjaka',
    'manjaka@admin.com',
    'admin',
    'active',
    NOW(),
    NOW()
) ON CONFLICT (id) DO UPDATE SET
    role = 'admin',
    status = 'active',
    updated_at = NOW();

-- R√©activer RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- ===============================================
-- MESSAGES DE CONFIRMATION
-- ===============================================

DO $$
BEGIN
    RAISE NOTICE '‚úÖ Politiques RLS corrig√©es (r√©cursion supprim√©e)';
    RAISE NOTICE 'üë§ Profil administrateur cr√©√©/mis √† jour';
    RAISE NOTICE 'üîê Email: manjaka@admin.com';
    RAISE NOTICE 'üîë Mot de passe: mdp123';
    RAISE NOTICE '';
    RAISE NOTICE 'üìå IMPORTANT:';
    RAISE NOTICE '1. Vous devez d''abord cr√©er l''utilisateur auth via /init';
    RAISE NOTICE '2. Ou bien utiliser l''interface d''administration Supabase';
    RAISE NOTICE '3. L''ID utilisateur doit correspondre √† celui dans auth.users';
END $$;
